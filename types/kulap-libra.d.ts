export class Account {
  static fromSecretKey(secretKeyHex: any): any;
  static fromSecretKeyBytes(secretKeyBytes: any): any;
  constructor(keyPair: any);
  keyPair: any;
  getAddress(): any;
}
export class AccountState {
  static fromBytes(bytes: any): any;
  constructor(authenticationKey: any, balance: any, receivedEventsCount: any, sentEventsCount: any, sequenceNumber: any, delegatedWithdrawalCapability: any);
  balance: any;
  sequenceNumber: any;
  authenticationKey: any;
  sentEventsCount: any;
  receivedEventsCount: any;
  delegatedWithdrawalCapability: any;
}
export const LibraAdmissionControlStatus: {
  "-1": string;
  "0": string;
  "1": string;
  "2": string;
  ACCEPTED: number;
  BLACKLISTED: number;
  REJECTED: number;
  UNKNOWN: number;
};
export class LibraClient {
  constructor(config: any);
  config: any;
  admissionControlProxy: any;
  acClient: any;
  decoder: any;
  encoder: any;
  execute(transaction: any, sender: any): any;
  getAccountState(address: any): any;
  getAccountStates(addresses: any): any;
  getAccountTransaction(address: any, sequenceNumber: any, fetchEvents: any): any;
  mintWithFaucetService(receiver: any, numCoins: any, waitForConfirmation: any): any;
  signRawTransaction(rawTransaction: any, keyPair: any): any;
  signTransaction(transaction: any, keyPair: any): any;
  transferCoins(sender: any, recipientAddress: any, numCoins: any): any;
  waitForConfirmation(accountAddress: any, transactionSequenceNumber: any): any;
}
export const LibraDeserializationError: {
  "0": string;
  "1": string;
  "10": string;
  "2": string;
  "3": string;
  "4": string;
  "5": string;
  "6": string;
  "7": string;
  "8": string;
  "9": string;
  BADHEADERTABLE: number;
  BADMAGIC: number;
  DUPLICATETABLE: number;
  MALFORMED: number;
  UNEXPECTEDSIGNATURETYPE: number;
  UNKNOWNBINARYERROR: number;
  UNKNOWNOPCODE: number;
  UNKNOWNSERIALIZEDTYPE: number;
  UNKNOWNSIGNATURETYPE: number;
  UNKNOWNTABLETYPE: number;
  UNKNOWNVERSION: number;
};
export const LibraErrorType: {
  "0": string;
  "1": string;
  "2": string;
  "3": string;
  "4": string;
  "5": string;
  DESERIALIZATION: number;
  ERRORTYPE_NOT_SET: number;
  EXECUTION: number;
  INVARIANT_VIOLATION: number;
  VALIDATION: number;
  VERIFICATION: number;
};
export const LibraExecutionErrorType: {
  "0": string;
  "1": string;
  "2": string;
  "3": string;
  "4": string;
  ARITHMETIC_ERROR: number;
  ASSERTION_FAILURE: number;
  EXECUTIONSTATUS_NOT_SET: number;
  REFERENCE_ERROR: number;
  RUNTIME_STATUS: number;
};
export const LibraInvariantViolationError: {
  "0": string;
  "1": string;
  "2": string;
  "3": string;
  "4": string;
  "5": string;
  "6": string;
  "7": string;
  "8": string;
  EMPTYCALLSTACK: number;
  EMPTYVALUESTACK: number;
  LINKERERROR: number;
  LOCALREFERENCEERROR: number;
  OUTOFBOUNDSINDEX: number;
  OUTOFBOUNDSRANGE: number;
  PCOVERFLOW: number;
  STORAGEERROR: number;
  UNKNOWNINVARIANTVIOLATIONERROR: number;
};
export const LibraMempoolTransactionStatus: {
  "-1": string;
  "0": string;
  "1": string;
  "2": string;
  "3": string;
  "4": string;
  "5": string;
  INSUFFICIENTBALANCE: number;
  INVALIDSEQNUMBER: number;
  INVALIDUPDATE: number;
  MEMPOOLISFULL: number;
  TOOMANYTRANSACTIONS: number;
  UNKNOWN: number;
  VALID: number;
};
export const LibraNetwork: {
  Testnet: string;
};
export const LibraProgramArgumentType: {
  "0": string;
  "1": string;
  "2": string;
  "3": string;
  ADDRESS: number;
  BYTEARRAY: number;
  STRING: number;
  U64: number;
};
export class LibraSignedTransaction {
  constructor(transaction: any, publicKey: any, signature: any);
  transaction: any;
  publicKey: any;
  signature: any;
}
export class LibraSignedTransactionWithProof {
  constructor(signedTransaction: any, proof: any, events: any);
  signedTransaction: any;
  proof: any;
  events: any;
}
export class LibraTransaction {
  static createTransfer(recipientAddress: any, numAccount: any, ...args: any[]): any;
  constructor(program: any, gasConstraint: any, expirationTime: any, sendersAddress: any, sequenceNumber: any);
  program: any;
  gasContraint: any;
  expirationTime: any;
  sendersAddress: any;
  sequenceNumber: any;
}
export class LibraTransactionEvent {
  constructor(data: any, sequenceNumber: any, address: any, path: any);
  data: any;
  sequenceNumber: any;
  address: any;
  path: any;
}
export class LibraTransactionResponse {
  constructor(signedTransaction: any, validatorId: any, acStatus: any, mempoolStatus: any, vmStatus: any);
  signedTransaction: any;
  validatorId: any;
  acStatus: any;
  mempoolStatus: any;
  vmStatus: any;
  awaitConfirmation(client: any): any;
}
export class LibraVMStatusError {
  constructor(errorType: any, validationStatus: any, verificationStatusList: any, invariantViolation: any, deserializationError: any, executionError: any);
  errorType: any;
  validationStatusError: any;
  verificationStatusErrors: any;
  invariantViolationError: any;
  deserializationError: any;
  executionError: any;
}
export const LibraValidationStatusCode: {
  "0": string;
  "1": string;
  "10": string;
  "11": string;
  "12": string;
  "13": string;
  "14": string;
  "15": string;
  "16": string;
  "2": string;
  "3": string;
  "4": string;
  "5": string;
  "6": string;
  "7": string;
  "8": string;
  "9": string;
  EXCEEDEDMAXTRANSACTIONSIZE: number;
  GASUNITPRICEABOVEMAXBOUND: number;
  GASUNITPRICEBELOWMINBOUND: number;
  INSUFFICIENTBALANCEFORTRANSACTIONFEE: number;
  INVALIDAUTHKEY: number;
  INVALIDSIGNATURE: number;
  INVALIDWRITESET: number;
  MAXGASUNITSBELOWMINTRANSACTIONGASUNITS: number;
  MAXGASUNITSEXCEEDSMAXGASUNITSBOUND: number;
  REJECTEDWRITESET: number;
  SENDINGACCOUNTDOESNOTEXIST: number;
  SEQUENCENUMBERTOONEW: number;
  SEQUENCENUMBERTOOOLD: number;
  TRANSACTIONEXPIRED: number;
  UNKNOWNMODULE: number;
  UNKNOWNSCRIPT: number;
  UNKNOWNVALIDATIONSTATUS: number;
};
export const LibraVerificationError: {
  "0": string;
  "1": string;
  "10": string;
  "11": string;
  "12": string;
  "13": string;
  "14": string;
  "15": string;
  "16": string;
  "17": string;
  "18": string;
  "19": string;
  "2": string;
  "20": string;
  "21": string;
  "22": string;
  "23": string;
  "24": string;
  "25": string;
  "26": string;
  "27": string;
  "28": string;
  "29": string;
  "3": string;
  "30": string;
  "31": string;
  "32": string;
  "33": string;
  "34": string;
  "35": string;
  "36": string;
  "37": string;
  "38": string;
  "39": string;
  "4": string;
  "40": string;
  "41": string;
  "42": string;
  "43": string;
  "44": string;
  "45": string;
  "46": string;
  "47": string;
  "48": string;
  "49": string;
  "5": string;
  "50": string;
  "51": string;
  "52": string;
  "53": string;
  "54": string;
  "55": string;
  "56": string;
  "57": string;
  "58": string;
  "59": string;
  "6": string;
  "60": string;
  "61": string;
  "62": string;
  "63": string;
  "64": string;
  "65": string;
  "66": string;
  "67": string;
  "7": string;
  "8": string;
  "9": string;
  ASSERTTYPEMISMATCHERROR: number;
  BOOLEANOPTYPEMISMATCHERROR: number;
  BORROWFIELDBADFIELDERROR: number;
  BORROWFIELDEXISTSMUTABLEBORROWERROR: number;
  BORROWFIELDTYPEMISMATCHERROR: number;
  BORROWGLOBALNORESOURCEERROR: number;
  BORROWGLOBALTYPEMISMATCHERROR: number;
  BORROWLOCEXISTSBORROWERROR: number;
  BORROWLOCREFERENCEERROR: number;
  BORROWLOCUNAVAILABLEERROR: number;
  BRTYPEMISMATCHERROR: number;
  CALLBORROWEDMUTABLEREFERENCEERROR: number;
  CALLTYPEMISMATCHERROR: number;
  COPYLOCEXISTSBORROWERROR: number;
  COPYLOCRESOURCEERROR: number;
  COPYLOCUNAVAILABLEERROR: number;
  CREATEACCOUNTTYPEMISMATCHERROR: number;
  DUPLICATEELEMENT: number;
  EQUALITYOPTYPEMISMATCHERROR: number;
  EXISTSRESOURCETYPEMISMATCHERROR: number;
  FREEZEREFEXISTSMUTABLEBORROWERROR: number;
  FREEZEREFTYPEMISMATCHERROR: number;
  INCONSISTENTFIELDS: number;
  INDEXOUTOFBOUNDS: number;
  INTEGEROPTYPEMISMATCHERROR: number;
  INVALIDFALLTHROUGH: number;
  INVALIDFIELDDEFREFERENCE: number;
  INVALIDMAINFUNCTIONSIGNATURE: number;
  INVALIDMODULEHANDLE: number;
  INVALIDRESOURCEFIELD: number;
  INVALIDSIGNATURETOKEN: number;
  JOINFAILURE: number;
  LOOKUPFAILED: number;
  MISSINGDEPENDENCY: number;
  MODULEADDRESSDOESNOTMATCHSENDER: number;
  MOVEFROMNORESOURCEERROR: number;
  MOVEFROMTYPEMISMATCHERROR: number;
  MOVELOCEXISTSBORROWERROR: number;
  MOVELOCUNAVAILABLEERROR: number;
  MOVETOSENDERNORESOURCEERROR: number;
  MOVETOSENDERTYPEMISMATCHERROR: number;
  NEGATIVESTACKSIZEWITHINBLOCK: number;
  NOMODULEHANDLES: number;
  PACKTYPEMISMATCHERROR: number;
  POPREFERENCEERROR: number;
  POPRESOURCEERROR: number;
  RANGEOUTOFBOUNDS: number;
  READREFEXISTSMUTABLEBORROWERROR: number;
  READREFRESOURCEERROR: number;
  READREFTYPEMISMATCHERROR: number;
  RECURSIVESTRUCTDEFINITION: number;
  RELEASEREFTYPEMISMATCHERROR: number;
  RETTYPEMISMATCHERROR: number;
  RETUNSAFETODESTROYERROR: number;
  STLOCTYPEMISMATCHERROR: number;
  STLOCUNSAFETODESTROYERROR: number;
  TYPEMISMATCH: number;
  TYPERESOLUTIONFAILURE: number;
  UNBALANCEDSTACK: number;
  UNIMPLEMENTEDHANDLE: number;
  UNKNOWNVERIFICATIONERROR: number;
  UNPACKTYPEMISMATCHERROR: number;
  UNUSEDFIELDS: number;
  VISIBILITYMISMATCH: number;
  WRITEREFEXISTSBORROWERROR: number;
  WRITEREFNOMUTABLEREFERENCEERROR: number;
  WRITEREFRESOURCEERROR: number;
  WRITEREFTYPEMISMATCHERROR: number;
};
export class LibraVerificationStatusError {
  constructor(status: any, moduleIndex: any, error: any, message: any);
  status: any;
  moduleIndex: any;
  error: any;
  message: any;
}
export const LibraVerificationStatusKind: {
  "0": string;
  "1": string;
  MODULE: number;
  SCRIPT: number;
};
export class LibraWallet {
  constructor(config: any);
  lastChild: any;
  accounts: any;
  config: any;
  keyFactory: any;
  addAccount(account: any): void;
  generateAccount(depth: any): any;
  getConfig(): any;
  newAccount(): any;
}
export class Mnemonic {
  constructor(words: any);
  words: any;
  toBytes(): any;
}
